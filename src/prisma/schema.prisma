datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
//   shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
//   previewFeatures = ["referentialActions"] // You won't need this in Prisma 3.X or higher.
}

model Account {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  username      String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  conversationParticipant  ConversationParticipant[]
  message  Message[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conversation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  conversationParticipant  ConversationParticipant[]
  message  Message[]

  lastMessageID String?  @unique
  lastMessage   Message? @relation(name: "lastestMessage", fields: [lastMessageID], references: [id], onUpdate: NoAction, onDelete: NoAction)
}

model ConversationParticipant {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  userID        String
  user          User @relation(fields: [userID], references: [id])

  conversationID  String
  conversation    Conversation @relation(fields: [conversationID], references: [id])

  isRead         Boolean
}

model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  conversationID  String
  conversation    Conversation @relation(fields: [conversationID], references: [id])
  
  senderID        String
  sender          User @relation(fields: [senderID], references: [id])

  isLastMessage   Conversation? @relation(name: "lastestMessage")
}